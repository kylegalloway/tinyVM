# Indentation of chain
chain_indent = "Tabbed"

# Maximum number of elements in a chain to fit on a single line
chain_one_line_max = 4

# How many lines a closure must have before it is block indented. -1 means never use block indent.
closure_block_indent_threshold = 5

# Replace strings of _ wildcards by a single .. in tuple patterns
condense_wildcard_suffices = false

# Brace style for control flow constructs
control_brace_style = "AlwaysNextLine"

# Don't reformat anything
disable_all_formatting = false

# Error if unable to get all lines within max_width
error_on_line_overflow = true

# Indent on function arguments
fn_arg_indent = "Visual"

# Argument density in functions
fn_args_density = "Tall"

# Layout of function arguments
fn_args_layout = "Visual"

# If function argument parenthesis goes on a newline
fn_args_paren_newline = true

# Brace style for functions
fn_brace_style = "AlwaysNextLine"

# Maximum width of the args of a function call before falling back to vertical formatting
fn_call_width = 80

# Put empty-body functions on a single line
fn_empty_single_line = true

# Location of return type in function declaration
fn_return_indent = "WithArgs"

# Put single-expression functions on a single line
fn_single_line = true

# Always print the abi for extern items
force_explicit_abi = true

# Always format string literals
force_format_strings = false

# Format string literals where necessary
format_strings = false

# Indentation of generics
generics_indent = "Visual"

# Use tab characters for indentation, spaces for alignment
hard_tabs = false

# Ideal width of each line
ideal_width = 80

# Put empty-body implementations on a single line
impl_empty_single_line = true

# Brace style for structs and enums
item_brace_style = "AlwaysNextLine"

# Put a trailing comma after a block based match arm (non-block arms are not affected)
match_block_trailing_comma = true

# Maximum width of each line
max_width = 100

# Unix or Windows line endings
newline_style = "Unix"

# Convert /* */ comments to // comments where possible
normalize_comments = false

# Reorder lists of names in import statements alphabetically
reorder_imported_names = true

# Reorder import statements alphabetically
reorder_imports = true

# Report all, none or unnumbered occurrences of FIXME in source file comments
report_fixme = "Always"

# Report all, none or unnumbered occurrences of TODO in source file comments
report_todo = "Always"

# Maximum line length for single line if-else expressions. A value of zero means always break if-else expressions.
single_line_if_else_max_width = 80

# Don't reformat out of line modules
skip_children = false

# Leave a space after the colon in a trait or lifetime bound
space_after_bound_colon = true

# a space after the colon in a type annotation
space_after_type_annotation_colon = true

# Leave a space before the colon in a trait or lifetime bound
space_before_bound = false

# Leave a space before the colon in a type annotation
space_before_type_annotation = false

# Put spaces around the  .. and ... range operators
spaces_around_ranges = false

# Put spaces within non-empty generic arguments
spaces_within_angle_brackets = false

# Put spaces within non-empty parentheses
spaces_within_parens = false

# spaces within non-empty square brackets
spaces_within_square_brackets = false

# Multiline style on literal structs
struct_lit_multiline_style = "PreferSingle"

# Style of struct definition
struct_lit_style = "Block"

# Maximum width in the body of a struct lit before falling back to vertical formatting
struct_lit_width = 16

# Maximum width in the body of a struct variant before falling back to vertical formatting
struct_variant_width = 35

# Number of spaces per tab
tab_spaces = 4

# Retain some formatting characteristics from the source code
take_source_hints = false

# How to handle trailing commas for lists
trailing_comma = "Vertical"

# Determines if '+' or '=' are wrapped in spaces in the punctuation of types
type_punctuation_density = "Wide"

# Replace uses of the try! macro by the ? shorthand
use_try_shorthand = false

# Use verbose output
verbose = false

# Density of a where clause
where_density = "CompressedIfEmpty"

# Indentation of a where clause
where_indent = "Tabbed"

# Element layout inside a where clause
where_layout = "Vertical"

# Indentation style of a where predicate
where_pred_indent = "Visual"

# Break comments to fit on the line
wrap_comments = false

# Wrap multiline match arms in blocks
wrap_match_arms = true

# What Write Mode to use when none is supplied: Replace, Overwrite, Display, Diff, Coverage
write_mode = "Overwrite"